<!-- Start: Overlay Form -->
<div class="overlay-form bg-white d-flex">
    <!-- Start: Form Sidebar -->
    <div class="d-none d-md-flex bg-white p-5 flex-column flex-shrink-0">
        <div class="form-steps mb-3 d-flex align-items-center">
            <span class="fs-3 text-primary icon-command"></span>
            <h5 class="ps-3 m-0">Fill the Details</h5>
        </div>
        <!-- Start: Form Nav List -->
        <div class="d-flex flex-column justify-content-between h-100">
            <ul class="nav form-nav py-4 flex-column">
                <li class="nav-item pb-3">
                    <a class="form-nav-link p-0 d-flex align-items-center active">
                        <span class="form-nav-icon text-center border border-2 border-primary rounded-circle"
                            *ngIf="!getControls['firstForm']?.value">1</span>
                        <span class="check-icon icon-checkmark text-center rounded-circle"
                            *ngIf="getControls['firstForm']?.value"></span>
                        <p class="nav-item-text ps-3 m-0">Developer Details</p>
                    </a>
                </li>
                <li class="nav-item pb-3">
                    <a class="form-nav-link p-0 d-flex align-items-center active">
                        <span class="form-nav-icon text-center border border-2 border-primary rounded-circle"
                            *ngIf="!getControls['secondForm']?.value">2</span>
                        <span class="check-icon icon-checkmark text-center rounded-circle"
                            *ngIf="getControls['secondForm']?.value"></span>
                        <p class="nav-item-text ps-3 m-0">Project Details</p>
                    </a>
                </li>
                <li class="nav-item pb-3">
                    <a class="form-nav-link p-0 d-flex align-items-center active">
                        <span class="form-nav-icon text-center border border-2 border-primary rounded-circle"
                            *ngIf="!getControls['thirdForm']?.value">3</span>
                        <span class="check-icon icon-checkmark text-center rounded-circle"
                            *ngIf="getControls['thirdForm']?.value"></span>
                        <p class="nav-item-text ps-3 m-0">Technology and Status</p>
                    </a>
                </li>
            </ul>
            <div class="d-flex justify-content-center">
                <button class="btn btn-info text-white px-5" (click)="onCancel()">
                    Cancel
                </button>
            </div>
        </div>
        <!-- End: Form Nav List -->
    </div>
    <!-- End: Form Sidebar -->
    <!-- Start: Form -->
    <form class="bg-secondary d-flex p-3 p-sm-5 flex-column flex-grow-1 overflow-hidden" [formGroup]="enrollForm"
        #checkForm>
        <p class="d-flex justify-content-end m-0 py-3">
            Having Trouble?
            <a class="text-primary ps-2 fw-bold"> Get Help</a>
        </p>
        <h5 class="fw-bolder">{{this.title}}</h5>
        <div class="d-flex flex-column flex-grow-1 justify-content-between overflow-auto">
            <!-- Start: Form - 1 -->
            <div class="form-1" *ngIf="!getControls['firstForm']?.value">
                <!-- <h6 class="fw-bolder">Developer's Details</h6> -->
                <p class="text-muted">Fill the Official Details of the developer to be staffed</p>
                <div class="row gx-0 m-0 gy-3">
                    <div class="form-floating col-12 col-md-6 pe-md-3"
                        [ngClass]="{'invalid': getControls['developerName'].touched }">
                        <input formControlName="developerName" type="text" class="form-control" name="developerName"
                            id="developerName" placeholder="Taywin Lannisater">
                        <label for="developerName">Developer's Name</label>
                        <span class="validation pt-1 text-danger"
                            *ngIf="getControls['developerName']?.errors?.['required']">
                            Developer Name is required.
                        </span>
                    </div>
                    <div class="form-floating col-12 col-md-6"
                        [ngClass]="{'invalid': getControls['contactNumber'].touched  }">
                        <input formControlName="contactNumber" type="text" class="form-control" name="contact"
                            id="contact" placeholder="9876543210">
                        <label for="contact">Contact Number</label>
                        <span class="validation pt-1 text-danger"
                            *ngIf="getControls['contactNumber']?.errors?.['required']">
                            Contact Number is required.
                        </span>
                    </div>
                    <div class="form-floating col-12" [ngClass]="{'invalid': getControls['email'].touched  }">
                        <input formControlName="email" type="email" class="form-control" name="email" id="email"
                            placeholder="name@example.com">
                        <label for="email">Email address</label>
                        <span class="validation pt-1 text-danger" *ngIf="getControls['email']?.errors?.['required']">
                            Email is required.
                        </span>
                    </div>
                    <div class="form-floating col-12 col-md-6 pe-md-3"
                        [ngClass]="{'invalid': getControls['developerId'].touched  }">
                        <input formControlName="developerId" type="text" class="form-control" name="employeeID"
                            id="employeeID" placeholder="D-123">
                        <label for="employeeID">Employee ID</label>
                        <span class="validation pt-1 text-danger"
                            *ngIf="getControls['developerId']?.errors?.['required']">
                            Developer ID is required.
                        </span>
                    </div>
                    <div class="form-floating col-12 col-md-6"
                        [ngClass]="{'invalid': getControls['designation'].touched  }">
                        <input formControlName="designation" type="text" class="form-control" name="designation"
                            id="designation" placeholder="UI Developer">
                        <label for="designation">Designation</label>
                        <span class="validation pt-1 text-danger"
                            *ngIf="getControls['designation']?.errors?.['required']">
                            Designation is required.
                        </span>
                    </div>
                </div>
            </div>
            <!-- End: Form - 1 -->
            <!-- Start: Form - 2 -->
            <div class="form-2" *ngIf="getControls['firstForm']?.value && !enrollForm.controls['secondForm']?.value">
                <!-- <h5 class="fw-bolder">Project Details</h5> -->
                <p class="text-muted">Fill the Official Details of the Project.</p>
                <div class="row gx-0 m-0 gy-3">
                    <div class="form-floating col-12">
                        <input formControlName="projectName" type="text" class="form-control" name="project"
                            id="project" placeholder="GTR">
                        <label for="project">Project</label>
                    </div>
                    <div class="form-floating col-12 col-md-6 pe-md-3">
                        <input formControlName="projectLead" type="text" class="form-control" name="leadPM" id="leadPM"
                            placeholder="name">
                        <label for="leadPM">Project Lead/PM</label>
                    </div>
                    <div class="form-floating col-12 col-md-6">
                        <input formControlName="moduleLead" type="text" class="form-control" name="moduleLead"
                            id="moduleLead" placeholder="name">
                        <label for="moduleLead">Module Lead/PM</label>
                    </div>
                    <div class="form-floating col-12 col-md-6 pe-md-3">
                        <input formControlName="description" type="text" class="form-control" name="projectDescription"
                            id="projectDescription" placeholder="xyz">
                        <label for="projectDescription">Description</label>
                    </div>
                    <div class="form-floating col-12 col-md-6 pe-md-3">
                        <input formControlName="staffing" type="text" class="form-control" name="projectstaffing"
                            id="projectstaffing" placeholder="xyz">
                        <label for="projectstaffing">Staffing</label>
                    </div>
                </div>
            </div>
            <!-- End: Form - 2 -->
            <!-- Start: Form - 3 -->
            <div class="form-3" *ngIf="!getControls['thirdForm']?.value && enrollForm.controls['secondForm']?.value">
                <!-- <h5 class="fw-bolder">Technolgy To Be used</h5> -->
                <p class="text-muted">Fill the Official Details of the Technolgy to be used in project to develop.</p>
                <div class="row gx-0 m-0 gy-3">
                    <div class="form-floating col-12">
                        <input formControlName="frameWork" type="text" class="form-control" name="frameWork"
                            id="frameWork" placeholder="GTR">
                        <label for="frameWork">Frame Work</label>
                    </div>
                    <div class="form-floating col-12 col-md-6 pe-md-3">
                        <input formControlName="cssFramework" type="text" class="form-control" name="cssFramework"
                            id="cssFramework" placeholder="9876543210">
                        <label for="cssFramework">CSS Frame Work</label>
                    </div>
                    <div class="form-floating col-12 col-md-6">
                        <input formControlName="joinDate" type="text" class="form-control" name="joinDate" id="joinDate"
                            placeholder="12-09-2021">
                        <label for="joinDate">Joining Date</label>
                    </div>
                    <div class="form-floating col-12 col-md-6 pe-md-3">
                        <input formControlName="releaseDate" type="text" class="form-control" name="releaseDate"
                            id="releaseDate" placeholder="12-09-2021">
                        <label for="releaseDate">Release Date</label>
                    </div>
                    <div class="form-floating col-12 col-md-6">
                        <input formControlName="status" type="text" class="form-control" name="status" id="status"
                            placeholder="xyz">
                        <label for="status">Status</label>
                    </div>
                    <div class="form-floating col-12">
                        <input formControlName="comment" type="text" class="form-control" name="comment" id="comment"
                            placeholder="XYZ">
                        <label for="comment">Comment</label>
                    </div>
                </div>
            </div>
            <!-- End: Form - 3 -->
            <!-- Start: Next and Previous Button -->
            <div class="form-steps d-flex m-1">
                <button type="button" class="btn btn-info text-white d-flex align-items-center"
                    *ngIf="getControls['firstForm'].value" (click)="previous()">
                    <span class="step-previous-icon d-block icon-circle-down pt-2 m-0"></span>
                    Previous Step
                </button>
                <div class="d-flex flex-grow-1 justify-content-end">
                    <button type="button" class="btn btn-white me-2 border-primary" (click)="reset()">Reset</button>
                    <button type="button" class="btn btn-primary d-flex align-items-center me-3 px-4"
                        *ngIf="!(!getControls['thirdForm']?.value && enrollForm.controls['secondForm']?.value)"
                        (click)="next(this.title, getControls)">
                        Next Step
                        <span class="step-next-icon d-block icon-circle-down pt-2 m-0"></span>
                    </button>
                    <button type="button" class="btn btn-success text-white px-5"
                        *ngIf="!getControls['thirdForm']?.value && enrollForm.controls['secondForm']?.value"
                        [disabled]="enrollForm.invalid" (click)="submit()">
                        Submit
                    </button>
                </div>
            </div>
            <!-- End: Next and Previous Button -->
        </div>
    </form>
    <!-- Start: Form -->
</div>
<!-- End: Overlay Form -->







////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
TS file

  @Output() closeOverlay: EventEmitter<Event>;

  public enrollForm: FormGroup;
  public submitted: any;
  public title: string;
  public isformValid: Boolean;
  public isFormSubmiited: Boolean;

  constructor(private formService: StaffingFormPresenterService) {
    this.closeOverlay = new EventEmitter();
    this.enrollForm = this.formService.formBuild();
    this.submitted = false;
    this.title = FIRST_FORM_TITLE;
    this.isformValid = false;
    this.isFormSubmiited = true;
  }

  ngOnInit(): void {
    this.formService.validForm$.subscribe((res) => {
      this.isformValid = res
    })
  }

  public get getControls() {
    return this.enrollForm.controls;
  }

  public onCancel() {
    this.closeOverlay.emit();
  }

  public next(title: any, formControls: any) {
    this.formService.checkValidity(title, formControls);
    if (this.isformValid) {
      this.submitted = !this.enrollForm.valid;
      let FISRTFORM = this.getControls['firstForm']?.value;
      let SECONDFORM = this.getControls['secondForm']?.value;
      let THIRDFORM = this.getControls['thirdForm']?.value;
      if (!FISRTFORM) {
        this.getControls['firstForm']?.setValue(true);
        this.title = SECOND_FORM_TITLE;
      } else if (FISRTFORM && !SECONDFORM) {
        this.getControls['secondForm']?.setValue(true);
        this.title = THIRD_FORM_TITLE;
      } else if ((FISRTFORM && SECONDFORM) && !THIRDFORM) {
        this.getControls['thirdForm']?.setValue(true);
        this.closeOverlay.emit();
      }
    }
  }

  public previous() {
    switch (this.title) {
      case FIRST_FORM_TITLE:
        this.getControls['firstForm']?.setValue(null);
        this.getControls['secondForm']?.setValue(null);
        this.getControls['thirdForm']?.setValue(null);
        break;
      case SECOND_FORM_TITLE:
        this.getControls['firstForm']?.setValue(null);
        this.getControls['secondForm']?.setValue(null);
        this.getControls['thirdForm']?.setValue(null);
        this.title = FIRST_FORM_TITLE;
        break;
      case THIRD_FORM_TITLE:
        this.getControls['thirdForm']?.setValue(null);
        this.getControls['secondForm']?.setValue(null);
        this.getControls['firstForm']?.setValue(true);
        this.title = SECOND_FORM_TITLE;
        break;
      default:
        break;
    }
  }

  public submit() {
  }

  public reset(){
    this.enrollForm.reset();
  }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Presenter file
 private _formValue: Subject<any>
  public formValue$: Observable<any>
  public formGroupObj!: FormGroup

  private validForm: Subject<any>;
  public validForm$: Observable<any>;

  constructor(private fb: FormBuilder) {
    this._formValue = new Subject();
    this.formValue$ = new Observable();
    this.formValue$ = this._formValue.asObservable();

    this.validForm = new Subject();
    this.validForm$ = new Observable();
    this.validForm$ = this.validForm.asObservable();

  }
  /**
   * @method formBuild
   * @description The form group with the form controls
   * @returns Form Group
   */
  public formBuild() {
    this.formGroupObj = this.fb.group({
      developerName: ['', Validators.required],
      contactNumber: ['', Validators.required],
      email: ['', Validators.required],
      developerId: ['', Validators.required],
      designation: ['', Validators.required],
      firstForm: [''],
      projectName: ['', Validators.required],
      projectLead: ['', Validators.required],
      moduleLead: ['', Validators.required],
      description: ['', Validators.required],
      staffing: ['', Validators.required],
      secondForm: [''],
      frameWork: ['', Validators.required],
      cssFramework: ['', Validators.required],
      joinDate: ['', Validators.required],
      releaseDate: ['', Validators.required],
      status: ['', Validators.required],
      comment: ['', Validators.required],
      thirdForm: ['']
    })
    return this.formGroupObj;
  }

  public checkValidity(title: string, formControl: any) {
    let formControlNames = this.getKeys(formControl)
    let firstFormValid, secondFormValid, thirdFormValid;
    if (title === FIRST_FORM_TITLE) {
      firstFormValid = this.validateFirstForm(formControlNames, formControl);
      this.validForm.next(firstFormValid);
      return 
    }
    else if(title === SECOND_FORM_TITLE){
      secondFormValid = this.validateSecondForm(formControlNames, formControl);
      this.validForm.next(secondFormValid);
      return;
    }
    else if(title === THIRD_FORM_TITLE){
      thirdFormValid = this.validateThirdForm(formControlNames, formControl)
      this.validForm.next(thirdFormValid);
      return;
    }
  }

  public getKeys(formControl: any) {
    let formControlsArr = [];
    let obj = new Object();
    for (let key in this.formGroupObj.controls) {
      obj = { [key]: formControl[key].status }
      formControlsArr.push(obj)
    }
    return formControlsArr
  }

  public validateFirstForm(formControlNames: any, formControl: any) {
    let developerName = formControl['developerName'].status;
    let contactNumber = formControl['contactNumber'].status;
    let email = formControl['email'].status;
    let developerId = formControl['developerId'].status;
    let designation = formControl['designation'].status;
    for (let i = 0; i < formControlNames.length; i++) {
      if ((developerName && contactNumber && email && developerId && designation) === 'VALID') {
        return true
      }
    }
    return false
  }

  public validateSecondForm(formControlNames: any, formControl: any) {
    let projectName = formControl['projectName'].status;
    let projectLead = formControl['projectLead'].status;
    let moduleLead = formControl['moduleLead'].status;
    let description = formControl['description'].status;
    let staffing = formControl['staffing'].status;
    for (let i = 0; i < formControlNames.length; i++) {
      if ((projectName && projectLead && moduleLead && description && staffing) === 'VALID') {
        return true
      }
    }
    return false
  }

  public validateThirdForm(formControlNames: any, formControl: any) {
    let frameWork = formControl['frameWork'].status;
    let cssFramework = formControl['cssFramework'].status;
    let joinDate = formControl['joinDate'].status;
    let releaseDate = formControl['releaseDate'].status;
    let status = formControl['status'].status;
    let comment = formControl['comment'].status;
    for (let i = 0; i < formControlNames.length; i++) {
      if ((frameWork && cssFramework && joinDate && releaseDate && status && comment) === 'VALID') {
        return true
      }
    }
    return false
  }

  public submitForm(formData: FormGroup) {
    this._formValue.next(formData.value);
  }