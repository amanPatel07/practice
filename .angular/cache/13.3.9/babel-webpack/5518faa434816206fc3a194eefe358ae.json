{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Practice\\\\Angular\\\\Staffing\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this._apiLink = environment.baseURL;\n  }\n\n  getUser() {\n    return new Promise((resolve, reject) => {\n      this.http.get(`${this._apiLink}/user`).subscribe({\n        next: res => {\n          this._userList = res;\n          resolve();\n        },\n        error: err => {\n          reject(err);\n        }\n      });\n    });\n  }\n\n  checkAuthentication(currentUser) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.getUser();\n      _this._isloggedin = yield Promise.all(_this._userList.map(item => {\n        if (item.userName === currentUser.userName && item.password == currentUser.password) {\n          return true;\n        } else {\n          return false;\n        }\n      }));\n      _this.allowUser;\n    })();\n  }\n\n  allowUser() {\n    console.log(this._isloggedin);\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac\n});","map":{"version":3,"sources":["C:/Practice/Angular/Staffing/src/app/core/services/auth.service.ts"],"names":["environment","i0","i1","AuthService","constructor","http","_apiLink","baseURL","getUser","Promise","resolve","reject","get","subscribe","next","res","_userList","error","err","checkAuthentication","currentUser","_isloggedin","all","map","item","userName","password","allowUser","console","log","ɵfac","AuthService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory"],"mappings":";AAAA,SAASA,WAAT,QAA4B,8BAA5B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,QAAL,GAAgBN,WAAW,CAACO,OAA5B;AACH;;AACDC,EAAAA,OAAO,GAAG;AACN,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,WAAKN,IAAL,CAAUO,GAAV,CAAe,GAAE,KAAKN,QAAS,OAA/B,EAAuCO,SAAvC,CAAiD;AAC7CC,QAAAA,IAAI,EAAGC,GAAD,IAAS;AACX,eAAKC,SAAL,GAAiBD,GAAjB;AACAL,UAAAA,OAAO;AACV,SAJ4C;AAK7CO,QAAAA,KAAK,EAAGC,GAAD,IAAS;AACZP,UAAAA,MAAM,CAACO,GAAD,CAAN;AACH;AAP4C,OAAjD;AASH,KAVM,CAAP;AAWH;;AACKC,EAAAA,mBAAmB,CAACC,WAAD,EAAc;AAAA;;AAAA;AACnC,YAAM,KAAI,CAACZ,OAAL,EAAN;AACA,MAAA,KAAI,CAACa,WAAL,SAAyBZ,OAAO,CAACa,GAAR,CAAY,KAAI,CAACN,SAAL,CAAeO,GAAf,CAAoBC,IAAD,IAAU;AAC9D,YAAKA,IAAI,CAACC,QAAL,KAAkBL,WAAW,CAACK,QAA/B,IAA6CD,IAAI,CAACE,QAAL,IAAiBN,WAAW,CAACM,QAA9E,EAAyF;AACrF,iBAAO,IAAP;AACH,SAFD,MAGK;AACD,iBAAO,KAAP;AACH;AACJ,OAPoC,CAAZ,CAAzB;AAQA,MAAA,KAAI,CAACC,SAAL;AAVmC;AAWtC;;AACDA,EAAAA,SAAS,GAAG;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKR,WAAjB;AACH;;AAhCoB;;AAkCzBlB,WAAW,CAAC2B,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAI7B,WAAV,EAAuBF,EAAE,CAACgC,QAAH,CAAY/B,EAAE,CAACgC,UAAf,CAAvB,CAAP;AAA4D,CAAjH;;AACA/B,WAAW,CAACgC,KAAZ,GAAoB,aAAclC,EAAE,CAACmC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAElC,WAAT;AAAsBmC,EAAAA,OAAO,EAAEnC,WAAW,CAAC2B;AAA3C,CAAtB,CAAlC","sourcesContent":["import { environment } from 'src/environments/environment';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class AuthService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this._apiLink = environment.baseURL;\r\n    }\r\n    getUser() {\r\n        return new Promise((resolve, reject) => {\r\n            this.http.get(`${this._apiLink}/user`).subscribe({\r\n                next: (res) => {\r\n                    this._userList = res;\r\n                    resolve();\r\n                },\r\n                error: (err) => {\r\n                    reject(err);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    async checkAuthentication(currentUser) {\r\n        await this.getUser();\r\n        this._isloggedin = await Promise.all(this._userList.map((item) => {\r\n            if ((item.userName === currentUser.userName) && (item.password == currentUser.password)) {\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }));\r\n        this.allowUser;\r\n    }\r\n    allowUser() {\r\n        console.log(this._isloggedin);\r\n    }\r\n}\r\nAuthService.ɵfac = function AuthService_Factory(t) { return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient)); };\r\nAuthService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthService, factory: AuthService.ɵfac });\r\n"]},"metadata":{},"sourceType":"module"}