{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Practice\\\\Angular\\\\Staffing\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, _route) {\n    this.http = http;\n    this._route = _route;\n    this._apiLink = environment.baseURL;\n  }\n\n  getUser() {\n    return new Promise((resolve, reject) => {\n      this.http.get(`${this._apiLink}/user`).subscribe({\n        next: res => {\n          this._userList = res;\n          resolve();\n        },\n        error: err => {\n          reject(err);\n        }\n      });\n    });\n  }\n\n  checkAuthentication(currentUser) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.getUser();\n\n      _this._userList.map(item => {\n        if (item.userName === currentUser.userName && item.password === parseInt(currentUser.password)) {\n          _this._isloggedin = true;\n          localStorage.setItem('user', _this._isloggedin);\n        } else {\n          _this._isloggedin = false;\n          localStorage.setItem('user', _this._isloggedin);\n        }\n      });\n\n      console.log(typeof localStorage.getItem('user'));\n    })();\n  }\n\n  completeAuth() {\n    let userStatus = localStorage.getItem('user');\n\n    if (userStatus === 'true') {\n      this._route.navigate(['../']);\n    } else {// this._route.navigate(['login'])\n    }\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac\n});","map":{"version":3,"sources":["C:/Practice/Angular/Staffing/src/app/core/services/auth.service.ts"],"names":["environment","i0","i1","i2","AuthService","constructor","http","_route","_apiLink","baseURL","getUser","Promise","resolve","reject","get","subscribe","next","res","_userList","error","err","checkAuthentication","currentUser","map","item","userName","password","parseInt","_isloggedin","localStorage","setItem","console","log","getItem","completeAuth","userStatus","navigate","ɵfac","AuthService_Factory","t","ɵɵinject","HttpClient","Router","ɵprov","ɵɵdefineInjectable","token","factory"],"mappings":";AAAA,SAASA,WAAT,QAA4B,8BAA5B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrBC,EAAAA,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAe;AACtB,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,QAAL,GAAgBR,WAAW,CAACS,OAA5B;AACH;;AACDC,EAAAA,OAAO,GAAG;AACN,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,WAAKP,IAAL,CAAUQ,GAAV,CAAe,GAAE,KAAKN,QAAS,OAA/B,EAAuCO,SAAvC,CAAiD;AAC7CC,QAAAA,IAAI,EAAGC,GAAD,IAAS;AACX,eAAKC,SAAL,GAAiBD,GAAjB;AACAL,UAAAA,OAAO;AACV,SAJ4C;AAK7CO,QAAAA,KAAK,EAAGC,GAAD,IAAS;AACZP,UAAAA,MAAM,CAACO,GAAD,CAAN;AACH;AAP4C,OAAjD;AASH,KAVM,CAAP;AAWH;;AACKC,EAAAA,mBAAmB,CAACC,WAAD,EAAc;AAAA;;AAAA;AACnC,YAAM,KAAI,CAACZ,OAAL,EAAN;;AACA,MAAA,KAAI,CAACQ,SAAL,CAAeK,GAAf,CAAoBC,IAAD,IAAU;AACzB,YAAKA,IAAI,CAACC,QAAL,KAAkBH,WAAW,CAACG,QAA/B,IAA6CD,IAAI,CAACE,QAAL,KAAkBC,QAAQ,CAACL,WAAW,CAACI,QAAb,CAA3E,EAAoG;AAChG,UAAA,KAAI,CAACE,WAAL,GAAmB,IAAnB;AACAC,UAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6B,KAAI,CAACF,WAAlC;AACH,SAHD,MAIK;AACD,UAAA,KAAI,CAACA,WAAL,GAAmB,KAAnB;AACAC,UAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6B,KAAI,CAACF,WAAlC;AACH;AACJ,OATD;;AAUAG,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAQH,YAAY,CAACI,OAAb,CAAqB,MAArB,CAApB;AAZmC;AAatC;;AACDC,EAAAA,YAAY,GAAG;AACX,QAAIC,UAAU,GAAGN,YAAY,CAACI,OAAb,CAAqB,MAArB,CAAjB;;AACA,QAAIE,UAAU,KAAK,MAAnB,EAA2B;AACvB,WAAK5B,MAAL,CAAY6B,QAAZ,CAAqB,CAAC,KAAD,CAArB;AACH,KAFD,MAGK,CACD;AACH;AACJ;;AAzCoB;;AA2CzBhC,WAAW,CAACiC,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAInC,WAAV,EAAuBH,EAAE,CAACuC,QAAH,CAAYtC,EAAE,CAACuC,UAAf,CAAvB,EAAmDxC,EAAE,CAACuC,QAAH,CAAYrC,EAAE,CAACuC,MAAf,CAAnD,CAAP;AAAoF,CAAzI;;AACAtC,WAAW,CAACuC,KAAZ,GAAoB,aAAc1C,EAAE,CAAC2C,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEzC,WAAT;AAAsB0C,EAAAA,OAAO,EAAE1C,WAAW,CAACiC;AAA3C,CAAtB,CAAlC","sourcesContent":["import { environment } from 'src/environments/environment';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"@angular/router\";\r\nexport class AuthService {\r\n    constructor(http, _route) {\r\n        this.http = http;\r\n        this._route = _route;\r\n        this._apiLink = environment.baseURL;\r\n    }\r\n    getUser() {\r\n        return new Promise((resolve, reject) => {\r\n            this.http.get(`${this._apiLink}/user`).subscribe({\r\n                next: (res) => {\r\n                    this._userList = res;\r\n                    resolve();\r\n                },\r\n                error: (err) => {\r\n                    reject(err);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    async checkAuthentication(currentUser) {\r\n        await this.getUser();\r\n        this._userList.map((item) => {\r\n            if ((item.userName === currentUser.userName) && (item.password === parseInt(currentUser.password))) {\r\n                this._isloggedin = true;\r\n                localStorage.setItem('user', this._isloggedin);\r\n            }\r\n            else {\r\n                this._isloggedin = false;\r\n                localStorage.setItem('user', this._isloggedin);\r\n            }\r\n        });\r\n        console.log(typeof (localStorage.getItem('user')));\r\n    }\r\n    completeAuth() {\r\n        let userStatus = localStorage.getItem('user');\r\n        if (userStatus === 'true') {\r\n            this._route.navigate(['../']);\r\n        }\r\n        else {\r\n            // this._route.navigate(['login'])\r\n        }\r\n    }\r\n}\r\nAuthService.ɵfac = function AuthService_Factory(t) { return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router)); };\r\nAuthService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthService, factory: AuthService.ɵfac });\r\n"]},"metadata":{},"sourceType":"module"}