{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Practice\\\\Angular\\\\Staffing\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nexport class AuthGuard {\n  constructor(_authService) {\n    this._authService = _authService;\n  }\n\n  canActivateChild(childRoute, state) {\n    return this.checkAuthenicate();\n  }\n\n  canActivate(route, state) {\n    return this.checkAuthenicate();\n  }\n\n  checkAuthenicate() {\n    return _asyncToGenerator(function* () {\n      let allow;\n      let isUserAllowed = localStorage.getItem('user'); // let isloggedIn = await this._authService.allowUser();\n      // if(isloggedIn){\n      //   allow = true;\n      // }\n      // else{\n      //   allow= false;\n      // }\n\n      console.log('auth', isUserAllowed);\n      return true;\n    })();\n  }\n\n}\n\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService));\n};\n\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac\n});","map":{"version":3,"sources":["C:/Practice/Angular/Staffing/src/app/core/guard/auth.guard.ts"],"names":["i0","i1","AuthGuard","constructor","_authService","canActivateChild","childRoute","state","checkAuthenicate","canActivate","route","allow","isUserAllowed","localStorage","getItem","console","log","ɵfac","AuthGuard_Factory","t","ɵɵinject","AuthService","ɵprov","ɵɵdefineInjectable","token","factory"],"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,0BAApB;AACA,OAAO,MAAMC,SAAN,CAAgB;AACnBC,EAAAA,WAAW,CAACC,YAAD,EAAe;AACtB,SAAKA,YAAL,GAAoBA,YAApB;AACH;;AACDC,EAAAA,gBAAgB,CAACC,UAAD,EAAaC,KAAb,EAAoB;AAChC,WAAO,KAAKC,gBAAL,EAAP;AACH;;AACDC,EAAAA,WAAW,CAACC,KAAD,EAAQH,KAAR,EAAe;AACtB,WAAO,KAAKC,gBAAL,EAAP;AACH;;AACKA,EAAAA,gBAAgB,GAAG;AAAA;AACrB,UAAIG,KAAJ;AACA,UAAIC,aAAa,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAApB,CAFqB,CAGrB;AACA;AACA;AACA;AACA;AACA;AACA;;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBJ,aAApB;AACA,aAAO,IAAP;AAXqB;AAYxB;;AAtBkB;;AAwBvBV,SAAS,CAACe,IAAV,GAAiB,SAASC,iBAAT,CAA2BC,CAA3B,EAA8B;AAAE,SAAO,KAAKA,CAAC,IAAIjB,SAAV,EAAqBF,EAAE,CAACoB,QAAH,CAAYnB,EAAE,CAACoB,WAAf,CAArB,CAAP;AAA2D,CAA5G;;AACAnB,SAAS,CAACoB,KAAV,GAAkB,aAActB,EAAE,CAACuB,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEtB,SAAT;AAAoBuB,EAAAA,OAAO,EAAEvB,SAAS,CAACe;AAAvC,CAAtB,CAAhC","sourcesContent":["import * as i0 from \"@angular/core\";\r\nimport * as i1 from \"../services/auth.service\";\r\nexport class AuthGuard {\r\n    constructor(_authService) {\r\n        this._authService = _authService;\r\n    }\r\n    canActivateChild(childRoute, state) {\r\n        return this.checkAuthenicate();\r\n    }\r\n    canActivate(route, state) {\r\n        return this.checkAuthenicate();\r\n    }\r\n    async checkAuthenicate() {\r\n        let allow;\r\n        let isUserAllowed = localStorage.getItem('user');\r\n        // let isloggedIn = await this._authService.allowUser();\r\n        // if(isloggedIn){\r\n        //   allow = true;\r\n        // }\r\n        // else{\r\n        //   allow= false;\r\n        // }\r\n        console.log('auth', isUserAllowed);\r\n        return true;\r\n    }\r\n}\r\nAuthGuard.ɵfac = function AuthGuard_Factory(t) { return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService)); };\r\nAuthGuard.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthGuard, factory: AuthGuard.ɵfac });\r\n"]},"metadata":{},"sourceType":"module"}