{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Practice\\\\Angular\\\\Staffing\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nexport class AuthGuard {\n  constructor(_authService) {\n    this._authService = _authService;\n  }\n\n  canActivate(route, state) {\n    return this.checkAuthenicate();\n  } // canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | UrlTree | Observable<boolean | UrlTree> | Promise<boolean | UrlTree> {\n  // }\n\n\n  checkAuthenicate() {\n    return _asyncToGenerator(function* () {\n      let isloggedIn = true; // let checkAuthentication = await this._authService.allowUser();\n      // console.log(checkAuthentication)\n      // if (checkAuthentication) {\n      //   isloggedIn = true;\n      // }\n      // else {\n      //   console.log(checkAuthentication)\n      //   isloggedIn = false;\n      // }\n\n      return isloggedIn;\n    })();\n  }\n\n}\n\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService));\n};\n\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Practice/Angular/Staffing/src/app/core/guard/auth.guard.ts"],"names":["i0","i1","AuthGuard","constructor","_authService","canActivate","route","state","checkAuthenicate","isloggedIn","ɵfac","AuthGuard_Factory","t","ɵɵinject","AuthService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,0BAApB;AACA,OAAO,MAAMC,SAAN,CAAgB;AACnBC,EAAAA,WAAW,CAACC,YAAD,EAAe;AACtB,SAAKA,YAAL,GAAoBA,YAApB;AACH;;AACDC,EAAAA,WAAW,CAACC,KAAD,EAAQC,KAAR,EAAe;AACtB,WAAO,KAAKC,gBAAL,EAAP;AACH,GANkB,CAOnB;AACA;;;AACMA,EAAAA,gBAAgB,GAAG;AAAA;AACrB,UAAIC,UAAU,GAAG,IAAjB,CADqB,CAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,aAAOA,UAAP;AAXqB;AAYxB;;AArBkB;;AAuBvBP,SAAS,CAACQ,IAAV,GAAiB,SAASC,iBAAT,CAA2BC,CAA3B,EAA8B;AAAE,SAAO,KAAKA,CAAC,IAAIV,SAAV,EAAqBF,EAAE,CAACa,QAAH,CAAYZ,EAAE,CAACa,WAAf,CAArB,CAAP;AAA2D,CAA5G;;AACAZ,SAAS,CAACa,KAAV,GAAkB,aAAcf,EAAE,CAACgB,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEf,SAAT;AAAoBgB,EAAAA,OAAO,EAAEhB,SAAS,CAACQ,IAAvC;AAA6CS,EAAAA,UAAU,EAAE;AAAzD,CAAtB,CAAhC","sourcesContent":["import * as i0 from \"@angular/core\";\r\nimport * as i1 from \"../services/auth.service\";\r\nexport class AuthGuard {\r\n    constructor(_authService) {\r\n        this._authService = _authService;\r\n    }\r\n    canActivate(route, state) {\r\n        return this.checkAuthenicate();\r\n    }\r\n    // canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | UrlTree | Observable<boolean | UrlTree> | Promise<boolean | UrlTree> {\r\n    // }\r\n    async checkAuthenicate() {\r\n        let isloggedIn = true;\r\n        // let checkAuthentication = await this._authService.allowUser();\r\n        // console.log(checkAuthentication)\r\n        // if (checkAuthentication) {\r\n        //   isloggedIn = true;\r\n        // }\r\n        // else {\r\n        //   console.log(checkAuthentication)\r\n        //   isloggedIn = false;\r\n        // }\r\n        return isloggedIn;\r\n    }\r\n}\r\nAuthGuard.ɵfac = function AuthGuard_Factory(t) { return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService)); };\r\nAuthGuard.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthGuard, factory: AuthGuard.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}